const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  

   export const notesAiModal = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "`Generate notes on the topic c++ in english language. The response should be exactly 6 pages long and in pure JSON format. Do not include any extra words, explanations, or formatting such as backticks or commas outside of the JSON format. Only provide valid JSON.`"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "{\n\"page1\": {\n\"title\": \"C++ Fundamentals\",\n\"content\": \"## Introduction to C++\\n\\nC++ is a powerful, general-purpose programming language known for its efficiency and flexibility. It's widely used in various domains, including game development, operating systems, embedded systems, and high-performance computing.\\n\\n### Key Features of C++:\\n\\n* **Object-Oriented Programming (OOP):** C++ supports OOP principles like classes, objects, inheritance, polymorphism, and encapsulation, promoting code reusability and maintainability.\\n* **Low-Level Access:** C++ provides direct access to memory and hardware, enabling developers to create highly optimized applications.\\n* **Performance:** C++ is known for its speed and efficiency, making it ideal for performance-critical applications.\\n* **Rich Standard Library:** C++ offers a comprehensive standard library with pre-built classes and functions for various tasks, such as input/output, string manipulation, and data structures.\\n* **Extensible:** C++ allows developers to extend the language through templates and custom data types.\\n\\n## Basic Syntax and Data Types\\n\\n### Hello World Program:\\n\\n```cpp\\n#include <iostream>\\n\\nint main() {\\n  std::cout << \\\"Hello, World!\\\" << std::endl;\\n  return 0;\\n}\\n```\\n\\n### Data Types:\\n\\n* **Fundamental Data Types:**\\n    * `int`: Integer values (e.g., 10, -5)\\n    * `float`: Single-precision floating-point values (e.g., 3.14)\\n    * `double`: Double-precision floating-point values (e.g., 3.14159265)\\n    * `char`: Single character (e.g., 'A', 'a', '1')\\n    * `bool`: Boolean values (true or false)\\n* **Derived Data Types:**\\n    * **Arrays:**  Collections of elements of the same data type.\\n    * **Pointers:** Variables that store memory addresses.\\n    * **References:** Aliases to existing variables.\\n    * **Structs:**  User-defined data structures that group variables of different data types.\\n* **User-Defined Data Types:**\\n    * **Classes:**  Blueprints for creating objects, defining data members and member functions.\\n    * **Enums:**  Sets of named integer constants.\\n\\n### Operators:\\n\\n* **Arithmetic Operators:** +, -, *, /, %, ++, --\\n* **Relational Operators:** ==, !=, <, >, <=, >=\\n* **Logical Operators:** && (AND), || (OR), ! (NOT)\\n* **Bitwise Operators:** &, |, ^, ~, <<, >>\\n* **Assignment Operators:** =, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=\\n\\n### Control Flow Statements:\\n\\n* **if-else:** Conditional execution based on a condition.\\n* **switch:**  Efficiently handles multiple conditions.\\n* **for loop:** Repeats a block of code for a specified number of times.\\n* **while loop:**  Repeats a block of code as long as a condition is true.\\n* **do-while loop:**  Executes a block of code at least once, then repeats as long as a condition is true.\\n\"\n},\n\"page2\": {\n\"title\": \"Object-Oriented Programming in C++\",\n\"content\": \"## Object-Oriented Programming (OOP)\\n\\n### Concepts:\\n\\n* **Classes:**  Blueprints for creating objects. They define data members (attributes) and member functions (methods) that encapsulate data and behavior.\\n* **Objects:**  Instances of a class. Each object has its own set of data members and can invoke the class's member functions.\\n* **Encapsulation:**  Hiding implementation details and exposing only necessary interfaces to the outside world. This promotes code maintainability and prevents unintended modifications.\\n* **Abstraction:**  Focusing on essential features and hiding unnecessary complexity. Abstract classes and interfaces play a key role in abstraction.\\n* **Inheritance:**  Creating new classes (derived classes) that inherit properties and behaviors from existing classes (base classes). This fosters code reuse and promotes a hierarchical structure.\\n* **Polymorphism:**  The ability of objects to take on multiple forms. This allows for flexible and dynamic behavior, where different objects can respond differently to the same message.\\n\\n### Class Definition:\\n\\n```cpp\\nclass MyClass {\\npublic:\\n  // Member functions (methods)\\n  void myMethod() { ... }\\n\\nprivate:\\n  // Data members (attributes)\\n  int myData;\\n};\\n```\\n\\n### Object Creation:\\n\\n```cpp\\nMyClass myObject;\\n```\\n\\n### Inheritance:\\n\\n```cpp\\nclass BaseClass { ... };\\n\\nclass DerivedClass : public BaseClass { ... };\\n```\\n\\n### Polymorphism:\\n\\n```cpp\\nclass Shape {\\npublic:\\n  virtual void draw() = 0; // Pure virtual function\\n};\\n\\nclass Circle : public Shape {\\npublic:\\n  void draw() override { ... }\\n};\\n\\nclass Square : public Shape {\\npublic:\\n  void draw() override { ... }\\n};\\n\\n// ...\\nShape* shape = new Circle(); // Dynamic polymorphism\\nshape->draw();\\n```\\n\"\n},\n\"page3\": {\n\"title\": \"C++ Standard Template Library (STL)\",\n\"content\": \"## C++ Standard Template Library (STL)\\n\\nThe C++ Standard Template Library (STL) is a collection of generic algorithms and data structures that provide reusable components for common programming tasks. It significantly simplifies development by offering ready-to-use solutions for tasks like sorting, searching, and container management.\\n\\n### Key Components of STL:\\n\\n* **Containers:**  Data structures that hold elements. Examples include:\\n    * **Sequence Containers:**  Store elements in a specific order.\\n        * `vector`: Dynamic array.\\n        * `list`: Doubly linked list.\\n        * `deque`: Double-ended queue.\\n        * `array`: Fixed-size array.\\n    * **Associative Containers:**  Store elements in a sorted order based on a key.\\n        * `set`:  Ordered set of unique elements.\\n        * `map`:  Associates keys with values.\\n        * `multiset`: Ordered set of possibly duplicate elements.\\n        * `multimap`:  Associates keys with multiple values.\\n* **Iterators:**  Pointers that traverse containers, allowing access to individual elements.\\n* **Algorithms:**  Generic functions that perform operations on containers. Examples include:\\n    * `sort()`: Sorts elements.\\n    * `search()`: Searches for a specific element.\\n    * `find()`: Finds the first occurrence of an element.\\n    * `copy()`: Copies elements from one container to another.\\n    * `reverse()`: Reverses the order of elements.\\n* **Function Objects (Functors):**  Objects that overload the `operator()` to encapsulate functions.\\n\\n### Using STL:\\n\\n```cpp\\n#include <vector>\\n#include <algorithm>\\n#include <iostream>\\n\\nint main() {\\n  std::vector<int> numbers = {1, 4, 2, 8, 5};\\n\\n  // Sorting elements\\n  std::sort(numbers.begin(), numbers.end());\\n\\n  // Printing sorted elements\\n  for (int number : numbers) {\\n    std::cout << number << \\\" \\\";\\n  }\\n  std::cout << std::endl;\\n\\n  return 0;\\n}\\n```\\n\"\n},\n\"page4\": {\n\"title\": \"Memory Management in C++\",\n\"content\": \"## Memory Management in C++\\n\\nMemory management is crucial for efficient program execution. C++ offers both manual and automatic memory management mechanisms.\\n\\n### Manual Memory Management (Dynamic Allocation):\\n\\n* **`new` operator:** Allocates memory on the heap for a new object.\\n* **`delete` operator:** Deallocates memory previously allocated with `new`.\\n\\n```cpp\\nint* ptr = new int(10); // Allocate memory for an integer\\n*ptr = 20; // Modify the value\\n\\ndelete ptr; // Deallocate the memory\\n```\\n\\n### Automatic Memory Management (Stack Allocation):\\n\\n* Variables declared within a function's scope are automatically allocated on the stack when the function is called and deallocated when the function returns.\\n\\n```cpp\\nint main() {\\n  int myVar = 5; // Automatically allocated on the stack\\n  // ...\\n  return 0;\\n}\\n```\\n\\n### Memory Leaks:\\n\\n* A memory leak occurs when memory is allocated but never deallocated, leading to a gradual depletion of available memory.\\n* This can happen when pointers are lost or when the `delete` operator is not used correctly.\\n\\n### Smart Pointers:\\n\\n* C++11 introduced smart pointers to simplify memory management and prevent memory leaks.\\n* Smart pointers automatically manage the lifetime of dynamically allocated objects, ensuring they are deallocated when no longer needed.\\n* **`unique_ptr`:**  Owns the object and prevents multiple pointers from pointing to the same object.\\n* **`shared_ptr`:**  Shares ownership of the object, allowing multiple pointers to access it. The object is deallocated when all shared pointers are destroyed.\\n* **`weak_ptr`:**  A non-owning pointer that provides a way to access an object managed by a `shared_ptr` without affecting its lifetime.\\n\\n```cpp\\n#include <memory>\\n\\nint main() {\\n  std::unique_ptr<int> uniquePtr(new int(10));\\n  // ...\\n  // No need to explicitly delete uniquePtr, as it's automatically managed\\n}\\n```\\n\"\n},\n\"page5\": {\n\"title\": \"Exception Handling in C++\",\n\"content\": \"## Exception Handling in C++\\n\\nException handling is a mechanism for managing runtime errors or unexpected events that may occur during program execution.\\n\\n### Key Concepts:\\n\\n* **Exceptions:**  Runtime errors or events that disrupt normal program flow.\\n* **Exception Handling:**  The process of catching and responding to exceptions.\\n* **`try` block:** Encloses code that might throw an exception.\\n* **`catch` block:**  Handles specific exceptions thrown in the `try` block.\\n* **`throw` keyword:**  Throws an exception object.\\n\\n### Basic Exception Handling:\\n\\n```cpp\\n#include <iostream>\\n#include <stdexcept>\\n\\nint main() {\\n  int numerator = 10, denominator = 0;\\n\\n  try {\\n    if (denominator == 0) {\\n      throw std::runtime_error(\\\"Division by zero!\\\");\\n    }\\n    int result = numerator / denominator;\\n    std::cout << \\\"Result: \\\" << result << std::endl;\\n  } catch (const std::exception& e) {\\n    std::cerr << \\\"Error: \\\" << e.what() << std::endl;\\n  }\\n\\n  return 0;\\n}\\n```\\n\\n### Exception Hierarchy:\\n\\n* C++ provides a hierarchy of standard exception classes, allowing for specific exception handling based on the type of error.\\n* `std::exception`: Base class for all standard exceptions.\\n* `std::runtime_error`:  Used for runtime errors.\\n* `std::logic_error`:  Used for logic errors.\\n* `std::bad_alloc`: Thrown when memory allocation fails.\\n\\n### Exception Handling Strategies:\\n\\n* **Catch Specific Exceptions:** Catch individual exception types for fine-grained error handling.\\n* **Catch Multiple Exceptions:**  Use multiple `catch` blocks to handle different exception types.\\n* **Rethrowing Exceptions:** Rethrow an exception to propagate it further up the call stack.\\n* **Exception Specifications:**  Declare the exceptions a function may throw, providing a contract for its usage.\\n\"\n},\n\"page6\": {\n\"title\": \"Advanced C++ Features\",\n\"content\": \"## Advanced C++ Features\\n\\n### Templates\\n\\n* **Generic Programming:**  Templates enable you to create reusable components that work with different data types.\\n* **Function Templates:**  Define functions that can operate on various data types without requiring separate implementations for each type.\\n\\n```cpp\\ntemplate <typename T>\\nvoid swap(T& a, T& b) {\\n  T temp = a;\\n  a = b;\\n  b = temp;\\n}\\n```\\n\\n* **Class Templates:**  Define classes that can work with different data types.\\n\\n```cpp\\ntemplate <typename T>\\nclass Stack {\\nprivate:\\n  T* data;\\n  int capacity;\\n  int top;\\n  // ...\\npublic:\\n  // ...\\n};\\n```\\n\\n### Lambda Expressions\\n\\n* **Anonymous Functions:** Lambda expressions are short, unnamed functions that can be defined and used inline.\\n* **Capture Lists:**  Specify variables from the surrounding scope that the lambda expression can access.\\n\\n```cpp\\nstd::vector<int> numbers = {1, 2, 3, 4, 5};\\n\\nstd::for_each(numbers.begin(), numbers.end(), [](int n) { std::cout << n * 2 << \\\" \\\"; });\\n```\\n\\n### RAII (Resource Acquisition Is Initialization)\\n\\n* **Automatic Resource Management:** RAII uses object constructors to acquire resources (like memory) and destructors to release them automatically.\\n* **Smart Pointers:** Smart pointers exemplify RAII by automatically managing the lifetime of dynamically allocated objects.\\n\\n### Move Semantics\\n\\n* **Efficient Object Transfer:** Move semantics allow for efficient object transfer without copying, reducing resource overhead.\\n* **`std::move`:**  Converts an lvalue to an rvalue, enabling move operations.\\n\\n###  Other Features:\\n\\n* **Namespaces:** Organize code into logical groups, avoiding naming conflicts.\\n* **Preprocessor Directives:** Macros, conditional compilation, and file inclusion mechanisms for managing code compilation.\\n* **Reference Wrappers:**  Provide a way to treat references as objects, allowing them to be passed to functions.\\n\"\n}\n}"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "Generate notes on the topic c++ in english language. The response should be exactly 6 pages long and in pure JSON format. Do not include any extra words, explanations, or formatting such as backticks or commas outside of the JSON format. Only provide valid JSON and don't use any hashtag and any other special character\n."},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "{\n\"page1\": {\n\"title\": \"C++ Fundamentals\",\n\"content\": \"Introduction to C++\\n\\nC++ is a powerful general-purpose programming language known for its efficiency and flexibility It is widely used in various domains including game development operating systems embedded systems and high-performance computing\\n\\nKey Features of C++\\n\\nObject-Oriented Programming OOP C++ supports OOP principles like classes objects inheritance polymorphism and encapsulation promoting code reusability and maintainability\\nLow-Level Access C++ provides direct access to memory and hardware enabling developers to create highly optimized applications\\nPerformance C++ is known for its speed and efficiency making it ideal for performance-critical applications\\nRich Standard Library C++ offers a comprehensive standard library with pre-built classes and functions for various tasks such as input output string manipulation and data structures\\nExtensible C++ allows developers to extend the language through templates and custom data types\\n\\nBasic Syntax and Data Types\\n\\nHello World Program\\n\\n#include iostream\\n\\nint main() \\n  std::cout << Hello World << std::endl\\n  return 0\\n\\nData Types\\n\\nFundamental Data Types\\n  int Integer values eg 10 -5\\n  float Single-precision floating-point values eg 3 14\\n  double Double-precision floating-point values eg 3 14159265\\n  char Single character eg A a 1\\n  bool Boolean values true or false\\nDerived Data Types\\n  Arrays Collections of elements of the same data type\\n  Pointers Variables that store memory addresses\\n  References Aliases to existing variables\\n  Structs User-defined data structures that group variables of different data types\\nUser-Defined Data Types\\n  Classes Blueprints for creating objects defining data members and member functions\\n  Enums Sets of named integer constants\\n\\nOperators\\n\\nArithmetic Operators  - * / % ++ --\\nRelational Operators == != < > <= >=\\nLogical Operators && AND || OR  NOT\\nBitwise Operators & | ^ ~ << >>\\nAssignment Operators  += -= *= /= %= &= |= ^= <<= >>=\\n\\nControl Flow Statements\\n\\nif-else Conditional execution based on a condition\\nswitch Efficiently handles multiple conditions\\nfor loop Repeats a block of code for a specified number of times\\nwhile loop Repeats a block of code as long as a condition is true\\ndo-while loop Executes a block of code at least once then repeats as long as a condition is true\"\n},\n\"page2\": {\n\"title\": \"Object-Oriented Programming in C++\",\n\"content\": \"Object-Oriented Programming OOP\\n\\nConcepts\\n\\nClasses Blueprints for creating objects They define data members attributes and member functions methods that encapsulate data and behavior\\nObjects Instances of a class Each object has its own set of data members and can invoke the class's member functions\\nEncapsulation Hiding implementation details and exposing only necessary interfaces to the outside world This promotes code maintainability and prevents unintended modifications\\nAbstraction Focusing on essential features and hiding unnecessary complexity Abstract classes and interfaces play a key role in abstraction\\nInheritance Creating new classes derived classes that inherit properties and behaviors from existing classes base classes This fosters code reuse and promotes a hierarchical structure\\nPolymorphism The ability of objects to take on multiple forms This allows for flexible and dynamic behavior where different objects can respond differently to the same message\\n\\nClass Definition\\n\\nclass MyClass \\npublic\\n  Member functions methods\\n  void myMethod()  \\n\\nprivate\\n  Data members attributes\\n  int myData\\n\\nObject Creation\\n\\nMyClass myObject\\n\\nInheritance\\n\\nclass BaseClass  \\n\\nclass DerivedClass : public BaseClass  \\n\\nPolymorphism\\n\\nclass Shape \\npublic\\n  virtual void draw()  0 Pure virtual function\\n\\nclass Circle : public Shape \\npublic\\n  void draw() override  \\n\\nclass Square : public Shape \\npublic\\n  void draw() override  \\n\\n// ...\\nShape shape = new Circle Dynamic polymorphism\\nshape-draw\"\n},\n\"page3\": {\n\"title\": \"C++ Standard Template Library STL\",\n\"content\": \"C++ Standard Template Library STL\\n\\nThe C++ Standard Template Library STL is a collection of generic algorithms and data structures that provide reusable components for common programming tasks It significantly simplifies development by offering ready-to-use solutions for tasks like sorting searching and container management\\n\\nKey Components of STL\\n\\nContainers Data structures that hold elements Examples include\\n  Sequence Containers Store elements in a specific order\\n    vector Dynamic array\\n    list Doubly linked list\\n    deque Double-ended queue\\n    array Fixed-size array\\n  Associative Containers Store elements in a sorted order based on a key\\n    set Ordered set of unique elements\\n    map Associates keys with values\\n    multiset Ordered set of possibly duplicate elements\\n    multimap Associates keys with multiple values\\nIterators Pointers that traverse containers allowing access to individual elements\\nAlgorithms Generic functions that perform operations on containers Examples include\\n  sort Sorts elements\\n  search Searches for a specific element\\n  find Finds the first occurrence of an element\\n  copy Copies elements from one container to another\\n  reverse Reverses the order of elements\\nFunction Objects Functors Objects that overload the operator to encapsulate functions\\n\\nUsing STL\\n\\n#include vector\\n#include algorithm\\n#include iostream\\n\\nint main() \\n  std::vector int numbers  1 4 2 8 5\\n\\n  Sorting elements\\n  std::sort numbers begin numbers end\\n\\n  Printing sorted elements\\n  for int number : numbers \\n    std::cout << number <<  \\n  std::cout << std::endl\\n\\n  return 0\\n\"\n},\n\"page4\": {\n\"title\": \"Memory Management in C++\",\n\"content\": \"Memory Management in C++\\n\\nMemory management is crucial for efficient program execution C++ offers both manual and automatic memory management mechanisms\\n\\nManual Memory Management Dynamic Allocation\\n\\nnew operator Allocates memory on the heap for a new object\\ndelete operator Deallocates memory previously allocated with new\\n\\nint ptr = new int 10 Allocate memory for an integer\\nptr = 20 Modify the value\\n\\ndelete ptr Deallocate the memory\\n\\nAutomatic Memory Management Stack Allocation\\n\\nVariables declared within a function's scope are automatically allocated on the stack when the function is called and deallocated when the function returns\\n\\nint main() \\n  int myVar = 5 Automatically allocated on the stack\\n  // ...\\n  return 0\\n\\nMemory Leaks\\n\\nA memory leak occurs when memory is allocated but never deallocated leading to a gradual depletion of available memory\\nThis can happen when pointers are lost or when the delete operator is not used correctly\\n\\nSmart Pointers\\n\\nC++11 introduced smart pointers to simplify memory management and prevent memory leaks\\nSmart pointers automatically manage the lifetime of dynamically allocated objects ensuring they are deallocated when no longer needed\\nunique_ptr Owns the object and prevents multiple pointers from pointing to the same object\\nshared_ptr Shares ownership of the object allowing multiple pointers to access it The object is deallocated when all shared pointers are destroyed\\nweak_ptr A non-owning pointer that provides a way to access an object managed by a shared_ptr without affecting its lifetime\\n\\n#include memory\\n\\nint main() \\n  std::unique_ptr int uniquePtr new int 10\\n  // ...\\n  No need to explicitly delete uniquePtr as it's automatically managed\\n\"\n},\n\"page5\": {\n\"title\": \"Exception Handling in C++\",\n\"content\": \"Exception Handling in C++\\n\\nException handling is a mechanism for managing runtime errors or unexpected events that may occur during program execution\\n\\nKey Concepts\\n\\nExceptions Runtime errors or events that disrupt normal program flow\\nException Handling The process of catching and responding to exceptions\\ntry block Encloses code that might throw an exception\\ncatch block Handles specific exceptions thrown in the try block\\nthrow keyword Throws an exception object\\n\\nBasic Exception Handling\\n\\n#include iostream\\n#include stdexcept\\n\\nint main() \\n  int numerator = 10 denominator = 0\\n\\n  try \\n    if denominator == 0 \\n      throw std::runtime_error Division by zero\\n    \\n    int result = numerator / denominator\\n    std::cout << Result  << result << std::endl\\n  catch const std::exception& e \\n    std::cerr << Error  << e what << std::endl\\n\\n  return 0\\n\\nException Hierarchy\\n\\nC++ provides a hierarchy of standard exception classes allowing for specific exception handling based on the type of error\\nstd exception Base class for all standard exceptions\\nstd runtime_error Used for runtime errors\\nstd logic_error Used for logic errors\\nstd bad_alloc Thrown when memory allocation fails\\n\\nException Handling Strategies\\n\\nCatch Specific Exceptions Catch individual exception types for fine-grained error handli"},
          ],
        },
      ],
    });
